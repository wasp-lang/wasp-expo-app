app waspApp {
  wasp: {
    version: "^0.16.0"
  },
  title: "wasp-app",

  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {},
      google: {},
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/login-success",
  }
}

route RootRoute { path: "/", to: MainPage }
page MainPage {
  authRequired: true,
  component: import { MainPage } from "@src/MainPage"
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import { LoginPage } from "@src/auth/LoginPage"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { SignupPage } from "@src/auth/SignupPage"
}

route LoginSuccessRoute { path: "/login-success", to: LoginSuccessPage }
page LoginSuccessPage {
  component: import { LoginSuccessPage } from "@src/auth/LoginSuccessPage"
}

query getTasks {
  // We specify the JS implementation of our query (which is an async JS function)
  fn: import { getTasks } from "@src/tasks/queries",
  // We tell Wasp that this query is doing something with the `Task` entity. With that, Wasp will
  // automatically refresh the results of this query when tasks change.
  entities: [Task]
}

action createTask {
  fn: import { createTask } from "@src/tasks/actions",
  entities: [Task]
}

action updateTask {
  fn: import { updateTask } from "@src/tasks/actions",
  entities: [Task]
}

action deleteTasks {
  fn: import { deleteTasks } from "@src/tasks/actions",
  entities: [Task],
}

api getTasksApi {
  httpRoute: (GET, "/api/tasks"),
  fn: import { getTasks } from "@src/apis",
  entities: [Task]
}

api getUserApi {
  httpRoute: (GET, "/api/user"),
  fn: import { getUser } from "@src/apis",
  entities: [User]
}
